HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'}

SITE = "http://hdout.tv/"
S_SERIES = SITE + "List/"
S_SERIES_XML = S_SERIES + "all/XML/"
S_MY_SERIES_XML = S_SERIES + "my/XML/"
S_EPISODES = SITE +"Series/"
S_EPISODES_XML = S_EPISODES + "%s/XML/"
S_FULLPATH = SITE + 'EpisodeLink/'
S_FULLPATH_XML = S_FULLPATH + '%s/XML/'
S_RSS_PATH = SITE + "RSS/"
NAME = L('Title')

authed = False

def m_ig(xml, tid, default = None):
    try:
        return xml.xpath(tid)[0].text
    except:
        return default

def Authentificate(user, passwd):
    global authed
    req = HTTP.Request(SITE, values={"login": user, "password": passwd})
    if "search" not in str(req):
        Log("Oooops, wrong pass or no creds")
        return False
    Log("Ok, i'm in!")
    authed = True
    return True

class Video:
    def __init__(self, xml):
        xml = xml.xpath('//item')[0]
        self.snd = [m_ig(xml,'./defsnd'), m_ig(xml, './addsnd')]
        self.sub = [m_ig(xml,'./sub1'),   m_ig(xml,'./sub2')   ]
        self.url = m_ig(xml, './videourl')
        self.scurl = m_ig(xml, './scurl')
        self.etitle = m_ig(xml, './etitle')
        self.title = m_ig(xml, './seriesitem/title')
        self.tmark = m_ig(xml, './tmark')

####################################################################################################
def FetchXML(url):
    Log(url)
    try:
        xml = XML.ElementFromURL(url)
    except:
        Log('Need auth or bad xml')
        xml = None
    if xml is None or str(xml.tag) != 'document':
        login = Prefs['hdout_username']
        Log('Login %s' % login)
        f = Authentificate(Prefs['hdout_username'], Prefs['hdout_password'])
        if not f:
            return None
        xml = XML.ElementFromURL(url)
    return xml

####################################################################################################
def NormalizeURL(url):

	if ' | ' in url:
		url = url.split(' | ')[0]

	return url

####################################################################################################
def MetadataObjectForURL(url):

    xml = FetchXML(url)
    if xml is None:
        return None
    v = Video(xml)

    Log('Metadata for %s' % url)

    show = v.title
    title = v.etitle
    summary = ""
    try: date = Datetime.ParseDate(v.tmark)
    except: date = None

    duration = None
    thumb = v.scurl
    return EpisodeObject(show = show, title = title, summary = summary, originally_available_at = date, duration = duration, thumb = Resource.ContentsOfURLWithFallback(thumb))

####################################################################################################
def MediaObjectsForURL(url):
    Log('Media object for %s' %  url)
    return [ MediaObject(
         parts = [
              PartObject(
                   key = Callback(PlayVideo, url=url, bitrate="600")
                   )
         ],
         bitrate = int(600),
         container = Container.MP4,
         video_resolution = "480",
         video_codec = VideoCodec.H264,
         audio_codec = AudioCodec.AAC,
         audio_channels = 2,
         optimized_for_streaming = True
    ) ]

####################################################################################################
def PlayVideo(url, bitrate=600):
    Log("play")
    xml = FetchXML(url)
    if xml is None:
        return None
    v = Video(xml)
    Log('Play %s' % v.url)
    return Redirect( url = v.url)